// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.32.0--rc2
// source: notes.proto

package notes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActorRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                            // required
	DisplayName   *string                `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"` // snapshot
	AvatarUrl     *string                `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3,oneof" json:"avatar_url,omitempty"`       // snapshot
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActorRef) Reset() {
	*x = ActorRef{}
	mi := &file_notes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorRef) ProtoMessage() {}

func (x *ActorRef) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorRef.ProtoReflect.Descriptor instead.
func (*ActorRef) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{0}
}

func (x *ActorRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActorRef) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ActorRef) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

type Note struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId     *string                `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	Author        *ActorRef              `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content       *string                `protobuf:"bytes,5,opt,name=content,proto3,oneof" json:"content,omitempty"`
	IsPinned      bool                   `protobuf:"varint,6,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`
	Tags          []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Revisions     []*NoteRevision        `protobuf:"bytes,8,rep,name=revisions,proto3" json:"revisions,omitempty"`
	Attachments   []*Attachment          `protobuf:"bytes,9,rep,name=attachments,proto3" json:"attachments,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Note) Reset() {
	*x = Note{}
	mi := &file_notes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{1}
}

func (x *Note) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Note) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *Note) GetAuthor() *ActorRef {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Note) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Note) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *Note) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *Note) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Note) GetRevisions() []*NoteRevision {
	if x != nil {
		return x.Revisions
	}
	return nil
}

func (x *Note) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Note) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Note) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type NoteRevision struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Editor        *ActorRef              `protobuf:"bytes,4,opt,name=editor,proto3" json:"editor,omitempty"`
	EditedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=edited_at,json=editedAt,proto3" json:"edited_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoteRevision) Reset() {
	*x = NoteRevision{}
	mi := &file_notes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteRevision) ProtoMessage() {}

func (x *NoteRevision) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteRevision.ProtoReflect.Descriptor instead.
func (*NoteRevision) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{2}
}

func (x *NoteRevision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NoteRevision) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NoteRevision) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NoteRevision) GetEditor() *ActorRef {
	if x != nil {
		return x.Editor
	}
	return nil
}

func (x *NoteRevision) GetEditedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EditedAt
	}
	return nil
}

type Attachment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	FileName      string                 `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileType      string                 `protobuf:"bytes,4,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	UploadedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=uploaded_at,json=uploadedAt,proto3" json:"uploaded_at,omitempty"`
	Sha256        *string                `protobuf:"bytes,6,opt,name=sha256,proto3,oneof" json:"sha256,omitempty"`
	SizeBytes     *int64                 `protobuf:"varint,7,opt,name=size_bytes,json=sizeBytes,proto3,oneof" json:"size_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	mi := &file_notes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{3}
}

func (x *Attachment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Attachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Attachment) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Attachment) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *Attachment) GetUploadedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadedAt
	}
	return nil
}

func (x *Attachment) GetSha256() string {
	if x != nil && x.Sha256 != nil {
		return *x.Sha256
	}
	return ""
}

func (x *Attachment) GetSizeBytes() int64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

type GetNoteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Include heavy fields?
	IncludeRevisions   bool `protobuf:"varint,2,opt,name=include_revisions,json=includeRevisions,proto3" json:"include_revisions,omitempty"`
	IncludeAttachments bool `protobuf:"varint,3,opt,name=include_attachments,json=includeAttachments,proto3" json:"include_attachments,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetNoteRequest) Reset() {
	*x = GetNoteRequest{}
	mi := &file_notes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNoteRequest) ProtoMessage() {}

func (x *GetNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNoteRequest.ProtoReflect.Descriptor instead.
func (*GetNoteRequest) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{4}
}

func (x *GetNoteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetNoteRequest) GetIncludeRevisions() bool {
	if x != nil {
		return x.IncludeRevisions
	}
	return false
}

func (x *GetNoteRequest) GetIncludeAttachments() bool {
	if x != nil {
		return x.IncludeAttachments
	}
	return false
}

type ListNotesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProjectId     *string                `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Query         *string                `protobuf:"bytes,3,opt,name=query,proto3,oneof" json:"query,omitempty"`
	SortBy        *string                `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3,oneof" json:"sort_by,omitempty"`
	SortDesc      *bool                  `protobuf:"varint,5,opt,name=sort_desc,json=sortDesc,proto3,oneof" json:"sort_desc,omitempty"`
	PageSize      int32                  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNotesRequest) Reset() {
	*x = ListNotesRequest{}
	mi := &file_notes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotesRequest) ProtoMessage() {}

func (x *ListNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotesRequest.ProtoReflect.Descriptor instead.
func (*ListNotesRequest) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{5}
}

func (x *ListNotesRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ListNotesRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ListNotesRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *ListNotesRequest) GetSortBy() string {
	if x != nil && x.SortBy != nil {
		return *x.SortBy
	}
	return ""
}

func (x *ListNotesRequest) GetSortDesc() bool {
	if x != nil && x.SortDesc != nil {
		return *x.SortDesc
	}
	return false
}

func (x *ListNotesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNotesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type CreateNoteRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProjectId      *string                `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3,oneof" json:"project_id,omitempty"`
	Title          string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content        *string                `protobuf:"bytes,3,opt,name=content,proto3,oneof" json:"content,omitempty"`
	IsPinned       bool                   `protobuf:"varint,4,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`
	Tags           []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Attachments    []*Attachment          `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Author         *ActorRef              `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	IdempotencyKey *string                `protobuf:"bytes,8,opt,name=idempotency_key,json=idempotencyKey,proto3,oneof" json:"idempotency_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateNoteRequest) Reset() {
	*x = CreateNoteRequest{}
	mi := &file_notes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNoteRequest) ProtoMessage() {}

func (x *CreateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNoteRequest.ProtoReflect.Descriptor instead.
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{6}
}

func (x *CreateNoteRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *CreateNoteRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateNoteRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *CreateNoteRequest) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *CreateNoteRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateNoteRequest) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *CreateNoteRequest) GetAuthor() *ActorRef {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CreateNoteRequest) GetIdempotencyKey() string {
	if x != nil && x.IdempotencyKey != nil {
		return *x.IdempotencyKey
	}
	return ""
}

type UpdateNoteRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	NoteId string                 `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	// New values (only those listed in update_mask are applied)
	Title            string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content          string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Tags             []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	IsPinned         bool                   `protobuf:"varint,5,opt,name=is_pinned,json=isPinned,proto3" json:"is_pinned,omitempty"`
	Attachments      []*Attachment          `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	User             *ActorRef              `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	UpdateMask       *fieldmaskpb.FieldMask `protobuf:"bytes,8,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	IfMatchUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=if_match_updated_at,json=ifMatchUpdatedAt,proto3,oneof" json:"if_match_updated_at,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateNoteRequest) Reset() {
	*x = UpdateNoteRequest{}
	mi := &file_notes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNoteRequest) ProtoMessage() {}

func (x *UpdateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNoteRequest.ProtoReflect.Descriptor instead.
func (*UpdateNoteRequest) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNoteRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *UpdateNoteRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateNoteRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateNoteRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateNoteRequest) GetIsPinned() bool {
	if x != nil {
		return x.IsPinned
	}
	return false
}

func (x *UpdateNoteRequest) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *UpdateNoteRequest) GetUser() *ActorRef {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateNoteRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNoteRequest) GetIfMatchUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IfMatchUpdatedAt
	}
	return nil
}

type DeleteNoteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NoteId        string                 `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	HardDelete    *bool                  `protobuf:"varint,2,opt,name=hard_delete,json=hardDelete,proto3,oneof" json:"hard_delete,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNoteRequest) Reset() {
	*x = DeleteNoteRequest{}
	mi := &file_notes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNoteRequest) ProtoMessage() {}

func (x *DeleteNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteNoteRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *DeleteNoteRequest) GetHardDelete() bool {
	if x != nil && x.HardDelete != nil {
		return *x.HardDelete
	}
	return false
}

type NoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Note          *Note                  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoteResponse) Reset() {
	*x = NoteResponse{}
	mi := &file_notes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteResponse) ProtoMessage() {}

func (x *NoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteResponse.ProtoReflect.Descriptor instead.
func (*NoteResponse) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{9}
}

func (x *NoteResponse) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

type ListNotesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notes         []*Note                `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNotesResponse) Reset() {
	*x = ListNotesResponse{}
	mi := &file_notes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotesResponse) ProtoMessage() {}

func (x *ListNotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotesResponse.ProtoReflect.Descriptor instead.
func (*ListNotesResponse) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{10}
}

func (x *ListNotesResponse) GetNotes() []*Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *ListNotesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListNoteRevisionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NoteId        string                 `protobuf:"bytes,1,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNoteRevisionsRequest) Reset() {
	*x = ListNoteRevisionsRequest{}
	mi := &file_notes_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNoteRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNoteRevisionsRequest) ProtoMessage() {}

func (x *ListNoteRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNoteRevisionsRequest.ProtoReflect.Descriptor instead.
func (*ListNoteRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{11}
}

func (x *ListNoteRevisionsRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *ListNoteRevisionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNoteRevisionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNoteRevisionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Revisions     []*NoteRevision        `protobuf:"bytes,1,rep,name=revisions,proto3" json:"revisions,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNoteRevisionsResponse) Reset() {
	*x = ListNoteRevisionsResponse{}
	mi := &file_notes_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNoteRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNoteRevisionsResponse) ProtoMessage() {}

func (x *ListNoteRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNoteRevisionsResponse.ProtoReflect.Descriptor instead.
func (*ListNoteRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{12}
}

func (x *ListNoteRevisionsResponse) GetRevisions() []*NoteRevision {
	if x != nil {
		return x.Revisions
	}
	return nil
}

func (x *ListNoteRevisionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteNoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNoteResponse) Reset() {
	*x = DeleteNoteResponse{}
	mi := &file_notes_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNoteResponse) ProtoMessage() {}

func (x *DeleteNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notes_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNoteResponse.ProtoReflect.Descriptor instead.
func (*DeleteNoteResponse) Descriptor() ([]byte, []int) {
	return file_notes_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteNoteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_notes_proto protoreflect.FileDescriptor

const file_notes_proto_rawDesc = "" +
	"\n" +
	"\vnotes.proto\x12\bnotes.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a google/protobuf/field_mask.proto\"\x86\x01\n" +
	"\bActorRef\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12&\n" +
	"\fdisplay_name\x18\x02 \x01(\tH\x00R\vdisplayName\x88\x01\x01\x12\"\n" +
	"\n" +
	"avatar_url\x18\x03 \x01(\tH\x01R\tavatarUrl\x88\x01\x01B\x0f\n" +
	"\r_display_nameB\r\n" +
	"\v_avatar_url\"\xd1\x03\n" +
	"\x04Note\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\"\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tH\x00R\tprojectId\x88\x01\x01\x12*\n" +
	"\x06author\x18\x03 \x01(\v2\x12.notes.v1.ActorRefR\x06author\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12\x1d\n" +
	"\acontent\x18\x05 \x01(\tH\x01R\acontent\x88\x01\x01\x12\x1b\n" +
	"\tis_pinned\x18\x06 \x01(\bR\bisPinned\x12\x12\n" +
	"\x04tags\x18\a \x03(\tR\x04tags\x124\n" +
	"\trevisions\x18\b \x03(\v2\x16.notes.v1.NoteRevisionR\trevisions\x126\n" +
	"\vattachments\x18\t \x03(\v2\x14.notes.v1.AttachmentR\vattachments\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAtB\r\n" +
	"\v_project_idB\n" +
	"\n" +
	"\b_contentJ\x04\bd\x10x\"\xb3\x01\n" +
	"\fNoteRevision\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12*\n" +
	"\x06editor\x18\x04 \x01(\v2\x12.notes.v1.ActorRefR\x06editor\x127\n" +
	"\tedited_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\beditedAt\"\x80\x02\n" +
	"\n" +
	"Attachment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12\x1b\n" +
	"\tfile_name\x18\x03 \x01(\tR\bfileName\x12\x1b\n" +
	"\tfile_type\x18\x04 \x01(\tR\bfileType\x12;\n" +
	"\vuploaded_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"uploadedAt\x12\x1b\n" +
	"\x06sha256\x18\x06 \x01(\tH\x00R\x06sha256\x88\x01\x01\x12\"\n" +
	"\n" +
	"size_bytes\x18\a \x01(\x03H\x01R\tsizeBytes\x88\x01\x01B\t\n" +
	"\a_sha256B\r\n" +
	"\v_size_bytes\"~\n" +
	"\x0eGetNoteRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12+\n" +
	"\x11include_revisions\x18\x02 \x01(\bR\x10includeRevisions\x12/\n" +
	"\x13include_attachments\x18\x03 \x01(\bR\x12includeAttachments\"\xaa\x02\n" +
	"\x10ListNotesRequest\x12\"\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tH\x00R\tprojectId\x88\x01\x01\x12\x1c\n" +
	"\auser_id\x18\x02 \x01(\tH\x01R\x06userId\x88\x01\x01\x12\x19\n" +
	"\x05query\x18\x03 \x01(\tH\x02R\x05query\x88\x01\x01\x12\x1c\n" +
	"\asort_by\x18\x04 \x01(\tH\x03R\x06sortBy\x88\x01\x01\x12 \n" +
	"\tsort_desc\x18\x05 \x01(\bH\x04R\bsortDesc\x88\x01\x01\x12\x1b\n" +
	"\tpage_size\x18\x06 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\a \x01(\tR\tpageTokenB\r\n" +
	"\v_project_idB\n" +
	"\n" +
	"\b_user_idB\b\n" +
	"\x06_queryB\n" +
	"\n" +
	"\b_sort_byB\f\n" +
	"\n" +
	"_sort_desc\"\xde\x02\n" +
	"\x11CreateNoteRequest\x12\"\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tH\x00R\tprojectId\x88\x01\x01\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1d\n" +
	"\acontent\x18\x03 \x01(\tH\x01R\acontent\x88\x01\x01\x12\x1b\n" +
	"\tis_pinned\x18\x04 \x01(\bR\bisPinned\x12\x12\n" +
	"\x04tags\x18\x05 \x03(\tR\x04tags\x126\n" +
	"\vattachments\x18\x06 \x03(\v2\x14.notes.v1.AttachmentR\vattachments\x12*\n" +
	"\x06author\x18\a \x01(\v2\x12.notes.v1.ActorRefR\x06author\x12,\n" +
	"\x0fidempotency_key\x18\b \x01(\tH\x02R\x0eidempotencyKey\x88\x01\x01B\r\n" +
	"\v_project_idB\n" +
	"\n" +
	"\b_contentB\x12\n" +
	"\x10_idempotency_key\"\x92\x03\n" +
	"\x11UpdateNoteRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12\x1b\n" +
	"\tis_pinned\x18\x05 \x01(\bR\bisPinned\x126\n" +
	"\vattachments\x18\x06 \x03(\v2\x14.notes.v1.AttachmentR\vattachments\x12&\n" +
	"\x04user\x18\a \x01(\v2\x12.notes.v1.ActorRefR\x04user\x12;\n" +
	"\vupdate_mask\x18\b \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12N\n" +
	"\x13if_match_updated_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x10ifMatchUpdatedAt\x88\x01\x01B\x16\n" +
	"\x14_if_match_updated_at\"b\n" +
	"\x11DeleteNoteRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12$\n" +
	"\vhard_delete\x18\x02 \x01(\bH\x00R\n" +
	"hardDelete\x88\x01\x01B\x0e\n" +
	"\f_hard_delete\"2\n" +
	"\fNoteResponse\x12\"\n" +
	"\x04note\x18\x01 \x01(\v2\x0e.notes.v1.NoteR\x04note\"a\n" +
	"\x11ListNotesResponse\x12$\n" +
	"\x05notes\x18\x01 \x03(\v2\x0e.notes.v1.NoteR\x05notes\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"o\n" +
	"\x18ListNoteRevisionsRequest\x12\x17\n" +
	"\anote_id\x18\x01 \x01(\tR\x06noteId\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"y\n" +
	"\x19ListNoteRevisionsResponse\x124\n" +
	"\trevisions\x18\x01 \x03(\v2\x16.notes.v1.NoteRevisionR\trevisions\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\".\n" +
	"\x12DeleteNoteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess2\xbd\x03\n" +
	"\vNoteService\x12;\n" +
	"\aGetNote\x12\x18.notes.v1.GetNoteRequest\x1a\x16.notes.v1.NoteResponse\x12D\n" +
	"\tListNotes\x12\x1a.notes.v1.ListNotesRequest\x1a\x1b.notes.v1.ListNotesResponse\x12A\n" +
	"\n" +
	"CreateNote\x12\x1b.notes.v1.CreateNoteRequest\x1a\x16.notes.v1.NoteResponse\x12A\n" +
	"\n" +
	"UpdateNote\x12\x1b.notes.v1.UpdateNoteRequest\x1a\x16.notes.v1.NoteResponse\x12G\n" +
	"\n" +
	"DeleteNote\x12\x1b.notes.v1.DeleteNoteRequest\x1a\x1c.notes.v1.DeleteNoteResponse\x12\\\n" +
	"\x11ListNoteRevisions\x12\".notes.v1.ListNoteRevisionsRequest\x1a#.notes.v1.ListNoteRevisionsResponseB\x13Z\x11dovakin0007/notesb\x06proto3"

var (
	file_notes_proto_rawDescOnce sync.Once
	file_notes_proto_rawDescData []byte
)

func file_notes_proto_rawDescGZIP() []byte {
	file_notes_proto_rawDescOnce.Do(func() {
		file_notes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_notes_proto_rawDesc), len(file_notes_proto_rawDesc)))
	})
	return file_notes_proto_rawDescData
}

var file_notes_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_notes_proto_goTypes = []any{
	(*ActorRef)(nil),                  // 0: notes.v1.ActorRef
	(*Note)(nil),                      // 1: notes.v1.Note
	(*NoteRevision)(nil),              // 2: notes.v1.NoteRevision
	(*Attachment)(nil),                // 3: notes.v1.Attachment
	(*GetNoteRequest)(nil),            // 4: notes.v1.GetNoteRequest
	(*ListNotesRequest)(nil),          // 5: notes.v1.ListNotesRequest
	(*CreateNoteRequest)(nil),         // 6: notes.v1.CreateNoteRequest
	(*UpdateNoteRequest)(nil),         // 7: notes.v1.UpdateNoteRequest
	(*DeleteNoteRequest)(nil),         // 8: notes.v1.DeleteNoteRequest
	(*NoteResponse)(nil),              // 9: notes.v1.NoteResponse
	(*ListNotesResponse)(nil),         // 10: notes.v1.ListNotesResponse
	(*ListNoteRevisionsRequest)(nil),  // 11: notes.v1.ListNoteRevisionsRequest
	(*ListNoteRevisionsResponse)(nil), // 12: notes.v1.ListNoteRevisionsResponse
	(*DeleteNoteResponse)(nil),        // 13: notes.v1.DeleteNoteResponse
	(*timestamppb.Timestamp)(nil),     // 14: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),     // 15: google.protobuf.FieldMask
}
var file_notes_proto_depIdxs = []int32{
	0,  // 0: notes.v1.Note.author:type_name -> notes.v1.ActorRef
	2,  // 1: notes.v1.Note.revisions:type_name -> notes.v1.NoteRevision
	3,  // 2: notes.v1.Note.attachments:type_name -> notes.v1.Attachment
	14, // 3: notes.v1.Note.created_at:type_name -> google.protobuf.Timestamp
	14, // 4: notes.v1.Note.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 5: notes.v1.NoteRevision.editor:type_name -> notes.v1.ActorRef
	14, // 6: notes.v1.NoteRevision.edited_at:type_name -> google.protobuf.Timestamp
	14, // 7: notes.v1.Attachment.uploaded_at:type_name -> google.protobuf.Timestamp
	3,  // 8: notes.v1.CreateNoteRequest.attachments:type_name -> notes.v1.Attachment
	0,  // 9: notes.v1.CreateNoteRequest.author:type_name -> notes.v1.ActorRef
	3,  // 10: notes.v1.UpdateNoteRequest.attachments:type_name -> notes.v1.Attachment
	0,  // 11: notes.v1.UpdateNoteRequest.user:type_name -> notes.v1.ActorRef
	15, // 12: notes.v1.UpdateNoteRequest.update_mask:type_name -> google.protobuf.FieldMask
	14, // 13: notes.v1.UpdateNoteRequest.if_match_updated_at:type_name -> google.protobuf.Timestamp
	1,  // 14: notes.v1.NoteResponse.note:type_name -> notes.v1.Note
	1,  // 15: notes.v1.ListNotesResponse.notes:type_name -> notes.v1.Note
	2,  // 16: notes.v1.ListNoteRevisionsResponse.revisions:type_name -> notes.v1.NoteRevision
	4,  // 17: notes.v1.NoteService.GetNote:input_type -> notes.v1.GetNoteRequest
	5,  // 18: notes.v1.NoteService.ListNotes:input_type -> notes.v1.ListNotesRequest
	6,  // 19: notes.v1.NoteService.CreateNote:input_type -> notes.v1.CreateNoteRequest
	7,  // 20: notes.v1.NoteService.UpdateNote:input_type -> notes.v1.UpdateNoteRequest
	8,  // 21: notes.v1.NoteService.DeleteNote:input_type -> notes.v1.DeleteNoteRequest
	11, // 22: notes.v1.NoteService.ListNoteRevisions:input_type -> notes.v1.ListNoteRevisionsRequest
	9,  // 23: notes.v1.NoteService.GetNote:output_type -> notes.v1.NoteResponse
	10, // 24: notes.v1.NoteService.ListNotes:output_type -> notes.v1.ListNotesResponse
	9,  // 25: notes.v1.NoteService.CreateNote:output_type -> notes.v1.NoteResponse
	9,  // 26: notes.v1.NoteService.UpdateNote:output_type -> notes.v1.NoteResponse
	13, // 27: notes.v1.NoteService.DeleteNote:output_type -> notes.v1.DeleteNoteResponse
	12, // 28: notes.v1.NoteService.ListNoteRevisions:output_type -> notes.v1.ListNoteRevisionsResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_notes_proto_init() }
func file_notes_proto_init() {
	if File_notes_proto != nil {
		return
	}
	file_notes_proto_msgTypes[0].OneofWrappers = []any{}
	file_notes_proto_msgTypes[1].OneofWrappers = []any{}
	file_notes_proto_msgTypes[3].OneofWrappers = []any{}
	file_notes_proto_msgTypes[5].OneofWrappers = []any{}
	file_notes_proto_msgTypes[6].OneofWrappers = []any{}
	file_notes_proto_msgTypes[7].OneofWrappers = []any{}
	file_notes_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_notes_proto_rawDesc), len(file_notes_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notes_proto_goTypes,
		DependencyIndexes: file_notes_proto_depIdxs,
		MessageInfos:      file_notes_proto_msgTypes,
	}.Build()
	File_notes_proto = out.File
	file_notes_proto_goTypes = nil
	file_notes_proto_depIdxs = nil
}
